<section>
  <div class="header">
    <h2 class="display-small">Material Theme</h2>
    <slot />
  </div>

  <h3 class="title-large">Color</h3>

  <div class="option">
    <label for="source">Source Color</label>
    <input id="source" type="color" />
  </div>

  <div class="option segmented-button">
    <input type="radio" name="brightness" value="light" id="light" checked />
    <label for="light">
      <i class="material-icons">light_mode</i>
      <span>Light</span>
    </label>

    <input type="radio" name="brightness" value="dark" id="dark" />
    <label for="dark">
      <i class="material-icons">dark_mode</i>
      <span>Dark</span>
    </label>
  </div>

  <h3 class="title-large">Shape</h3>

  <label class="slider">
    <input id="shape-small" type="range" min="0" max="100" />
    <span>Small</span>
  </label>

  <label class="slider">
    <input id="shape-medium" type="range" min="0" max="100" />
    <span>Medium</span>
  </label>

  <label class="slider">
    <input id="shape-large" type="range" min="0" max="100" />
    <span>Large</span>
  </label>
</section>

<!-- Copy code for current theme / Download -->

<style>
  .option {
    display: flex;
    align-items: center;
    justify-content: space-between;

    margin-bottom: 20px;
  }
  .header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-bottom: 20px;
  }
  h2 {
     font-size: 1.5rem;
  }
</style>

<script>
  import { generateTheme } from "../utils/color";
  const root = document.body;
  const s = getComputedStyle(root);
  // Source
  const source = document.querySelector("#source") as HTMLInputElement;
  const themeMeta = document.querySelector('meta[name="theme-color"]')!;
  let styleTarget = document.head.querySelector(
    "style[data-theme]"
  ) as HTMLStyleElement | null;
  if (!styleTarget) {
    styleTarget = document.createElement("style");
    styleTarget.setAttribute("data-theme", "");
    document.head.appendChild(styleTarget);
  }
  source.addEventListener("input", () => {
    const color = source.value;
    root.style.setProperty("--md-source", color);
    themeMeta.setAttribute("content", color);
    generateTheme(color, styleTarget!);
  });
  const color = themeMeta.getAttribute("content")!;
  source.value = color;
  generateTheme(color, styleTarget);

  // Brightness
  const light = document.querySelector("#light") as HTMLInputElement;
  const dark = document.querySelector("#dark") as HTMLInputElement;
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)");
  light.addEventListener("change", () => {
    document.body.classList.remove("dark-theme");
    document.body.classList.add("light-theme");
  });
  dark.addEventListener("change", () => {
    document.body.classList.remove("light-theme");
    document.body.classList.add("dark-theme");
  });
  if (prefersDark.matches) {
    document.body.classList.add("dark-theme");
  } else {
    document.body.classList.add("light-theme");
  }

  // Shape
  const sSmall = document.querySelector("#shape-small") as HTMLInputElement;
  const sMedium = document.querySelector("#shape-medium") as HTMLInputElement;
  const sLarge = document.querySelector("#shape-large") as HTMLInputElement;
  const shape = "--md-sys-shape-corner";
  sSmall.addEventListener("input", () => {
    root.style.setProperty(`${shape}-small`, sSmall.value + "px");
  });
  sMedium.addEventListener("input", () => {
    root.style.setProperty(`${shape}-medium`, sMedium.value + "px");
  });
  sLarge.addEventListener("input", () => {
    root.style.setProperty(`${shape}-large`, sLarge.value + "px");
  });
  sSmall.valueAsNumber = Number(
    s.getPropertyValue(`${shape}-small`).replace("px", "")
  );
  sMedium.valueAsNumber = Number(
    s.getPropertyValue(`${shape}-medium`).replace("px", "")
  );
  sLarge.valueAsNumber = Number(
    s.getPropertyValue(`${shape}-large`).replace("px", "")
  );
</script>
