<section>
  <div class="header">
    <h2 class="display-small">Material Theme</h2>
    <slot />
  </div>

  <h3 class="title-large">Color</h3>

  <div class="option">
    <label for="source">Source Color</label>
    <input id="source" type="color" />
  </div>

  <div class="option segmented-button">
    <input type="radio" name="brightness" value="light" id="light" checked />
    <label for="light">
      <i class="material-icons">light_mode</i>
      <span>Light</span>
    </label>

    <input type="radio" name="brightness" value="dark" id="dark" />
    <label for="dark">
      <i class="material-icons">dark_mode</i>
      <span>Dark</span>
    </label>
  </div>

  <h3 class="title-large">Shape</h3>

  <div>
    <label for="shape-small">Small</label>
    <input class="slider" id="shape-small" type="range" min="0" max="100" />
  </div>

  <div>
    <label for="shape-medium">Medium</label>
    <input class="slider" id="shape-medium" type="range" min="0" max="100" />
  </div>

  <div>
    <label for="shape-large">Large</label>
    <input class="slider" id="shape-large" type="range" min="0" max="100" />
  </div>
</section>

<!-- Copy code for current theme / Download -->

<style>
  .option {
    display: flex;
    align-items: center;
    justify-content: space-between;

    margin-bottom: 20px;
  }
  .header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-bottom: 20px;
  }
  h2 {
    font-size: 1.5rem;
    display: inline-block;
  }
</style>

<script>
  import { generateTheme } from "../utils/color";
  const root = document.body;
  const s = getComputedStyle(root);
  const shape = "--md-sys-shape-corner";

  const themeMeta = document.querySelector('meta[name="theme-color"]')!;
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)");
  const source = document.querySelector("#source") as HTMLInputElement;
  const sSmall = document.querySelector("#shape-small") as HTMLInputElement;
  const sMedium = document.querySelector("#shape-medium") as HTMLInputElement;
  const sLarge = document.querySelector("#shape-large") as HTMLInputElement;
  const light = document.querySelector("#light") as HTMLInputElement;
  const dark = document.querySelector("#dark") as HTMLInputElement;

  setup();
  loadSettings();

  function setup() {
    // Brightness
    light.addEventListener("change", () => {
      document.body.classList.remove("dark-theme");
      document.body.classList.add("light-theme");
      setCodepenBrightness("light");
      saveSettings();
    });
    dark.addEventListener("change", () => {
      document.body.classList.remove("light-theme");
      document.body.classList.add("dark-theme");
      setCodepenBrightness("dark");
      saveSettings();
    });
    prefersDark.addEventListener("change", (e) => {
      if (e.matches) {
        dark.checked = true;
        light.checked = false;
      } else {
        dark.checked = false;
        light.checked = true;
      }
    });
    // Shape
    sSmall.addEventListener("input", () => {
      root.style.setProperty(`${shape}-small`, sSmall.value + "px");
      saveSettings();
    });
    sMedium.addEventListener("input", () => {
      root.style.setProperty(`${shape}-medium`, sMedium.value + "px");
      saveSettings();
    });
    sLarge.addEventListener("input", () => {
      root.style.setProperty(`${shape}-large`, sLarge.value + "px");
      saveSettings();
    });

    // Source
    source.addEventListener("input", () => {
      const color = source.value;
      root.style.setProperty("--md-source", color);
      themeMeta.setAttribute("content", color);
      generateTheme(color, styleTarget!);
      saveSettings();
    });

    let styleTarget = document.head.querySelector(
      "style[data-theme]"
    ) as HTMLStyleElement | null;
    if (!styleTarget) {
      styleTarget = document.createElement("style");
      styleTarget.setAttribute("data-theme", "");
      document.head.appendChild(styleTarget);
    }
  }

  function setCodepenBrightness(theme: string) {
    const codepen = document.querySelectorAll(".cp_embed_iframe");
    for (let i = 0; i < codepen.length; i++) {
      const iframe = codepen[i] as HTMLIFrameElement;
      const url = new URL(iframe.src);
      url.searchParams.set("theme-id", theme);
      iframe.src = url.toString();
    }
  }

  function saveSettings() {
    // Update url query paramaters
    const url = new URL(window.location.href);
    url.searchParams.set("source", source.value);
    url.searchParams.set("brightness", light.checked ? "light" : "dark");
    url.searchParams.set("shape-small", sSmall.value);
    url.searchParams.set("shape-medium", sMedium.value);
    url.searchParams.set("shape-large", sLarge.value);
    window.history.replaceState({}, "", url.toString());
  }

  function loadSettings() {
    // Get settings from url query paramaters
    const url = new URL(window.location.href);
    const sourceVal = url.searchParams.get("source");
    const brightness = url.searchParams.get("brightness");
    const shapeSmall = url.searchParams.get("shape-small");
    const shapeMedium = url.searchParams.get("shape-medium");
    const shapeLarge = url.searchParams.get("shape-large");
    if (sourceVal) {
      source.value = sourceVal;
    } else {
      source.value = themeMeta.getAttribute("content")!;
    }
    if (prefersDark.matches) {
      dark.checked = true;
      light.checked = false;
    } else {
      dark.checked = false;
      light.checked = true;
    }
    function getShape(key: string) {
      const val = s.getPropertyValue(`${shape}-${key}`);
      let single = val.split(" ")[0];
      if (single.endsWith("px")) {
        single = single.slice(0, -2);
      }
      return Number(single);
    }
    if (shapeSmall) {
      sSmall.valueAsNumber = Number(shapeSmall);
    } else {
      sSmall.valueAsNumber = getShape("small");
    }
    if (shapeMedium) {
      sMedium.valueAsNumber = Number(shapeMedium);
    } else {
      sMedium.valueAsNumber = getShape("medium");
    }
    if (shapeLarge) {
      sLarge.valueAsNumber = Number(shapeLarge);
    } else {
      sLarge.valueAsNumber = getShape("large");
    }
  }
</script>
