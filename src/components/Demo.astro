---
import * as fs from "fs";
import { Code } from "astro/components";

const { root, group, outline } = Astro.props;

const allSnippets = fs.readdirSync(`lib/${root}`);
let groupSnippets = group
    ? allSnippets.filter((s) => s.includes(`${group}.`))
    : allSnippets;
const snippets = [];
// Order the snippets by name [default, default.ripple, deffault.disabled]
if (
    group &&
    groupSnippets.length > 0 &&
    groupSnippets[0].includes("disabled")
) {
    // Move to end
    const disabled = groupSnippets.shift();
    groupSnippets.push(disabled);
}

// Move default to start
const idx = groupSnippets.findIndex((s) => s.split(".").length == 2);
if (idx > -1) {
    const defaultSnippet = groupSnippets.splice(idx, 1)[0];
    groupSnippets.unshift(defaultSnippet);
}

for (const snippet of groupSnippets) {
    const name = snippet
        .split(".")
        .filter((e) => e !== "html")
        .join(" ")
        .replaceAll("-", " ")
        .split(" ")
        .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
        .join(" ");
    const content = fs.readFileSync(`lib/${root}/${snippet}`, "utf8");
    snippets.push({ content, snippet, name });
}
---

<section>
    <div class="preview row">
        {
            snippets.map(({ content, snippet, name }) => (
                <div id={snippet} class="snippet">
                    <div
                        class="render"
                        data-outline={outline !== undefined}
                        set:html={content}
                    />
                    <div class="label">{name}</div>
                </div>
            ))
        }
    </div>
    <div class="code">
        <Code
            code={snippets
                .map((e) => `<!-- ${e.name} -->\n${e.content}`)
                .join("\n\n")}
            lang="html"
        />
    </div>
</section>

<style>
    .preview {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        margin: 2rem;
        gap: 1rem;
    }
    .render[data-outline] {
        outline: 1px solid var(--md-sys-color-outline);
        border-radius: var(--md-sys-shape-small);
    }
    .snippet {
        padding: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }
    .label {
        font-size: 0.8rem;
        text-align: center;
        margin-top: 0.5rem;
        opacity: 0.5;
        text-align: center;
    }
    .code {
        position: relative;
        width: 100%;
    }
    .codepen-button {
        top: 10px;
        right: 10px;
        cursor: pointer;
        text-align: right;
    }
</style>
