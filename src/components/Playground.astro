---
const { id, height } = Astro.props;

const content = await Astro.slots.render('default');

function formatXml(xml: string, tab = '\t') { // tab = optional indent value, default is tab (\t)
    var formatted = '', indent = '';
    tab = tab || '\t';
    xml.split(/>\s*</).forEach(function (node) {
        if (node.match(/^\/\w/)) indent = indent.substring(tab.length); // decrease indent by one 'tab'
        formatted += indent + '<' + node + '>\r\n';
        if (node.match(/^<?\w[^>]*[^\/]$/)) indent += tab;              // increase indent
    });
    return formatted.substring(1, formatted.length - 3);
}

const formattd = formatXml(content);

const htmlSrc = [
    `<!-- playground-fold -->`,
    `<!doctype html>`,
    `<head>`,
    `    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">`,
    `    <link rel="stylesheet" href="https://rodydavis.github.io/material-design-lite/css/mdl.css">`,
    `    <link rel="stylesheet" href="style.css">`,
    `</head>`,
    `<body>`,
    `<!-- playground-fold-end -->`,
    ``,
    ...formattd.split('\n'),
    `<!-- playground-fold -->`,
    `</body>`,
].join('\n');

const codeSrc = [].join('\n');

const stylesSrc = [
    ':root {',
    '  display: flex;',
    '  flex-direction: column;',
    '  align-items: center;',
    '  justify-content: center;',
    '  height: 100vh;',
    '  width: 100vw;',
    '  background: transparent',
    '}',
    'body {',
    '  background: transparent',
    '}',
].join('\n');


const config = {
    "files": {
        "index.html": {
            "content": htmlSrc,
        },
        "main.ts": {
            "content": codeSrc,
        },
        "style.css": {
            "content": stylesSrc,
        },
    }
};

const scriptSrc = [
    `const ide = document.querySelector('#editor-${id}');`,
    `ide.config = ${JSON.stringify(config)};`,
    'const previews = document.querySelectorAll("playground-preview");',
    'previews.forEach(preview => {',
    `  preview.iframe?.setAttribute('allowtransparency', '');`,
    '});',
].join('\n');
---

<style define:vars={{ height: height ?? 'auto' }}>
    .demo {
        width: 100%;
        background-color: var(--md-sys-color-background);
        border-radius: var(--md-sys-shape-small);
        overflow: hidden;

        --playground-preview-toolbar-background: var(--md-sys-color-background);
        --playground-highlight-color: var(--md-sys-color-primary);
        --playground-code-background: transparent;
        --playground-code-default-color: var(--md-sys-color-on-background);
        --playground-code-selection-background: var(--md-sys-color-surface-variant);
        --playground-border: none;
    }

    .demo>playground-file-editor {
        height: auto;
    }

    .demo>playground-preview {
        height: var(--height);
    }
</style>
<playground-project id={`editor-${id}`}></playground-project>

<div class="demo">
    <playground-preview project={ `editor-${id}` }></playground-preview>
    <playground-file-editor project={ `editor-${id}` } filename="index.html"></playground-file-editor>
</div>

<script async set:html={scriptSrc}></script>